/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.perfectday.dashboard.gui;

import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.lang.reflect.InvocationTargetException;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;
import org.perfectday.dashboard.Main;
import org.perfectday.dashboard.exception.GameBuilderException;
import org.perfectday.dashboard.threads.DashBoardThreadGroup;
import org.perfectday.gamebuilder.GameBuilder;
import org.perfectday.gamebuilder.GameBuilderFactory;
import org.perfectday.gamebuilder.model.BattleDescription;

/**
 *
 * @author Miguel (alakat@gmail.com)
 */
public class MainMenu extends javax.swing.JFrame {

    private static final Logger logger
            = Logger.getLogger(MainMenu.class);

    /**
     * Creates new form MainMenu
     */
    public MainMenu() {
        initComponents();
       // this.testPannel.runTest();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        multijugador = new javax.swing.JButton();
        unjugador = new javax.swing.JButton();
        about = new javax.swing.JButton();
        preferencias = new javax.swing.JButton();
        unjugador1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        multijugador.setText("Multijugador online");
        multijugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multijugadorActionPerformed(evt);
            }
        });

        unjugador.setText("Un Jugador");
        unjugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unjugadorActionPerformed(evt);
            }
        });

        about.setText("Conocenos");
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });

        preferencias.setText("Preferencias");
        preferencias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferenciasActionPerformed(evt);
            }
        });

        unjugador1.setText("Multijugador en local");
        unjugador1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unjugador1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(preferencias)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(112, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(unjugador1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unjugador, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(about, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(multijugador, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(103, 103, 103))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(preferencias)
                .addGap(18, 18, 18)
                .addComponent(unjugador, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(unjugador1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(multijugador, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(about, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void multijugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multijugadorActionPerformed
        // TODO add your handling code here:
        new DashBoard(Main.userInit, Main.passInit).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_multijugadorActionPerformed

    private void unjugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unjugadorActionPerformed
        if (Thread.currentThread().getThreadGroup() instanceof DashBoardThreadGroup) {
            DashBoardThreadGroup dashBoardThreadGroup
                    = (DashBoardThreadGroup) Thread.currentThread().getThreadGroup();
            if (dashBoardThreadGroup.inGame()) {
                JOptionPane.showMessageDialog(this,
                        "Ya existe una partida en ejecución",
                        "PerfectDay. Información",
                        JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }

        playQuestSoloGame();
    }//GEN-LAST:event_unjugadorActionPerformed

    /**
     * Crea una partida solo con misiones
     */
    public void playQuestSoloGame() {
        try {
            GameBuilder bg = GameBuilderFactory.getInstance().createGameBuilderOnePlayerSelectQuest();
            bg.setBattleDescription(null);
            try {
                bg.move();
            } catch (IllegalAccessException ex) {
                logger.error("Error de acceso ilegal", ex);

                JOptionPane.showMessageDialog(this, "Error en las comunicaciones", "Ha sido imposible iniciar el juego", JOptionPane.ERROR_MESSAGE);
            } catch (InvocationTargetException ex) {
                logger.error("invocacion ilegal", ex);

                JOptionPane.showMessageDialog(this, "Error en las comunicaciones", "Ha sido imposible iniciar el juego", JOptionPane.ERROR_MESSAGE);
            }
        } catch (GameBuilderException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "PerfectDay. Información", JOptionPane.INFORMATION_MESSAGE);
        } catch (NoSuchMethodException ex) {
            logger.error("Error al crear el constructor de partidas", ex);
            JOptionPane.showMessageDialog(this, "Error en las comunicaciones", "Ha sido imposible iniciar el juego", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Crea una partida "solo" sin misiones. Tod aletario
     *
     * @throws HeadlessException
     */
    public void playSimpleSoloGame() throws HeadlessException {
        DescriptionBattleDialog dbd = new DescriptionBattleDialog(null, true);
        dbd.setVisible(true);
        BattleDescription bd = null;
        if (dbd.isAcepted()) {
            try {
                bd = dbd.getBattleDescription();
                Logger.getLogger(ChatPanel.class).info("Mission:" + bd.getMission());
                Logger.getLogger(ChatPanel.class).info("Public:" + bd.isBattlePublic());
                Logger.getLogger(ChatPanel.class).info("Point:" + bd.getPoint());
                GameBuilder bg = GameBuilderFactory.getInstance().createGameBuilderOnePlayer();
                bg.setBattleDescription(bd);
                try {
                    bg.move();
                } catch (IllegalAccessException ex) {
                    logger.error("Error de acceso ilegal", ex);

                    JOptionPane.showMessageDialog(this, "Error en las comunicaciones", "Ha sido imposible iniciar el juego", JOptionPane.ERROR_MESSAGE);
                } catch (InvocationTargetException ex) {
                    logger.error("invocacion ilegal", ex);

                    JOptionPane.showMessageDialog(this, "Error en las comunicaciones", "Ha sido imposible iniciar el juego", JOptionPane.ERROR_MESSAGE);
                }
            } catch (GameBuilderException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "PerfectDay. Información", JOptionPane.INFORMATION_MESSAGE);
            } catch (NoSuchMethodException ex) {
                logger.error("Error al crear el constructor de partidas", ex);
                JOptionPane.showMessageDialog(this, "Error en las comunicaciones", "Ha sido imposible iniciar el juego", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            Logger.getLogger(ChatPanel.class).info("Batalla cancelada");
        }
    }

    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aboutActionPerformed

    private void preferenciasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferenciasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_preferenciasActionPerformed

    private void unjugador1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unjugador1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_unjugador1ActionPerformed

    /**
     * Visible y pack especial en perfectday. Posiciona en el centro, agrupa
     * datos. coloca tama?os etc
     */
    public void PDshow() {

        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        this.pack();
        final int width = this.getWidth();
        final int height = this.getHeight();
        final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (screenSize.width / 2) - (width / 2);
        int y = (screenSize.height / 2) - (height / 2);

        this.setLocation(x, y);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton about;
    private javax.swing.JButton multijugador;
    private javax.swing.JButton preferencias;
    private javax.swing.JButton unjugador;
    private javax.swing.JButton unjugador1;
    // End of variables declaration//GEN-END:variables

}
